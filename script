#This is the third script placed in the aws lambda function.
#This script will get the status of running burpsuite scan using the request.get() method and trigger mail if the scanning is completed.

#-------------------------------------STEPS-------------------------------------#

#In this step, first aws cloudwatch will trigger the aws lambda function between every 5-10 mins. 
#When the lambda function is triggered, it will look for the 'scanning.txt' file present in github repository. 
#This github file contains the list of task_id (i.e used to determine or find the scanning process ) of all the present running scan within the bupsuite.
#For each task id, we will send a http request i.e request.get() method and see the response. 
#If the scan_status returns with succeeded value than the burpsuite scanning is completed, so we will trigger the email for that task (scanning) and remove the particualer this task_id from the list of all the task_id since this process is completed and we don't want to see the status of completed request again and again.
#Then the task_id of unfinished scaning process will be commited to 'scanning.txt' file again.

import boto3
from botocore.exceptions import ClientError
import json,requests
from github import Github
from tabulate import tabulate

git = Github("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")



################################-----Github-----##########################################

def send_to_github(usr_input):
    repo = git.get_repo("gaganrkc/ditiss_project")
    usr_input=str(usr_input).strip()
    try:
        file = repo.get_contents("scanning.txt", ref='side')
        repo.update_file(file.path, "New commit", f"{usr_input}", file.sha, branch="side")
    except:
        repo.create_file("scanning.txt", 'NEW COMMIT', usr_input)


def read_input_from_github():
    repo = git.get_repo("gaganrkc/ditiss_project")
    file = repo.get_contents("scanning.txt", ref='side')
    prev_data = file.decoded_content.decode().split(",")
    return prev_data

################################-----Github-----##########################################



def send_email(issue_list):
    if len(issue_list)>0:
        col_names=['ID','Issue Name','Origin','Severity','Issue Description']
        generated_table=tabulate(issue_list, headers=col_names, tablefmt='html')
    else:
        generated_table=""
    SENDER = "gaganrkc@gmail.com" # must be verified in AWS SES Email
    RECIPIENT = "gaganchaurasia4444@gmail.com" # must be verified in AWS SES Email

    # If necessary, replace us-west-2 with the AWS Region you're using for Amazon SES.
    AWS_REGION = "ap-south-1"

    # The subject line for the email.
    SUBJECT = "Burpsuite Scanning has been completed..!! Ditiss project"

    # The email body for recipients with non-HTML email clients.
    BODY_TEXT = ("Hi...\r\n"
                "The burpsuite scanning has been completed successfully. "
                "Kindly look into the burpsuite for the detailed report."
                )
                
    # The HTML body of the email.
    BODY_HTML = f"""<html>
    <head></head>
    <body>
    <h2>Hi...</h2>
    <p>The burpsuite scanning has been completed successfully. </p>
    <p>Kindly look into the burpsuite for the detailed report.</p>
    {generated_table}
    </body>
    </html>
                """            

    # The character encoding for the email.
    CHARSET = "UTF-8"

    # Create a new SES resource and specify a region.
    client = boto3.client('ses',region_name=AWS_REGION)

    # Try to send the email.
    try:
        #Provide the contents of the email.
        response = client.send_email(
            Destination={
                'ToAddresses': [
                    RECIPIENT,
                ],
            },
            Message={
                'Body': {
                    'Html': {
        
                        'Data': BODY_HTML
                    },
                    'Text': {
        
                        'Data': BODY_TEXT
                    },
                },
                'Subject': {

                    'Data': SUBJECT
                },
            },
            Source=SENDER
        )
    # Display an error if something goes wrong.	
    except ClientError as e:
        print(e.response['Error']['Message'])
    else:
        print("Email sent! Message ID:"),
        print(response['MessageId'])

#def lambda_handler(event, context):
def lambda_handler():
    task_id=read_input_from_github()
    left_task_id=[]

    if len(task_id)>0 and task_id[0]!='':
        print("loop=",task_id)
        for i in task_id:
            url="https://27a2-45-250-227-175.in.ngrok.io/v0.1/scan/"+i
            res=requests.get(url)
            output=json.loads(res.text)
            if output.get('scan_status') == 'succeeded': 
                issues_found=output['issue_events']
                issue_list=[]
                if len(issues_found)>0:
                    for j in issues_found:
                        # issue_background = (j['issue']['issue_background'][:100] + '..') if len(j['issue']['issue_background']) > 100 else j['issue']['issue_background']
                        issue_list.append([j['id'],j['issue']['name'],j['issue']['origin'],j['issue']['severity'],j['issue']['issue_background']])
                        
                    
                    #tabulate(issue_list, headers=col_names)
                send_email(issue_list)
                print("Mail sent for task id:",i)
            else:
                print("elseeeeeeeeeeeeeeeee")
                issues_found=output['issue_events']
                left_task_id.append(i)

        if len(left_task_id)>0:
            send_to_github(','.join(left_task_id)) 
            
    else:
        print("No activity to perform")

    ################################-----Find the status of burpsuite scanning-----##########################################
lambda_handler()
